// https://chatgpt.com/share/67876ee1-70a0-800f-903f-37d7bf072ee5


// BFS

#include <iostream>
#include <queue>

using namespace std;

const int MAX_NODES = 100; // Maximum number of nodes in the graph

// Function to perform BFS
void BFS(int startNode, int graph[MAX_NODES][MAX_NODES], int numNodes) {
    bool visited[MAX_NODES]; // Array to keep track of visited nodes

    // Initialize all nodes as not visited
    for (int i = 0; i < MAX_NODES; i++) {
        visited[i] = false;
    }

    queue<int> q; // Queue to manage BFS traversal
    q.push(startNode);
    visited[startNode] = true;

    cout << "BFS Traversal: ";
    while (!q.empty()) {
        int current = q.front(); // Get the front node in the queue
        q.pop();
        cout << current << " "; // Print the current node

        // Visit all adjacent nodes of the current node
        for (int i = 1; i <= numNodes; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                q.push(i);       // Add the neighbor to the queue
                visited[i] = true; // Mark it as visited
            }
        }
    }
    cout << endl;
}

int main() {
    int numNodes = 6; // Number of nodes in the graph
    int graph[MAX_NODES][MAX_NODES] = {0}; // Adjacency matrix for the graph

    // Define the edges of the graph
    graph[1][2] = graph[2][1] = 1; // Edge between 1 and 2
    graph[1][3] = graph[3][1] = 1; // Edge between 1 and 3
    graph[2][4] = graph[4][2] = 1; // Edge between 2 and 4
    graph[2][5] = graph[5][2] = 1; // Edge between 2 and 5
    graph[3][6] = graph[6][3] = 1; // Edge between 3 and 6

    int startNode = 1; // Starting node for BFS
    BFS(startNode, graph, numNodes);

    return 0;
}
